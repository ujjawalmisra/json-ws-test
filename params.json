{"name":"Json-ws-test","tagline":"Simple framework for testing JSON (response) Web-Services","body":"# json-ws-test\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2013-2014 Ujjawal Misra. See the LICENSE file for license rights and limitations (MIT).\r\n\r\n\r\n## Description\r\n\r\n**JSON** (JavaScript Object Notation) is being heavily used in various projects, systems and platforms as the response format of **web-services**. The web-services may, themselves, be RESTful or using HTTP Methods like GET or POST for making a call, i.e. for passing inputs. \r\n\r\nDevelopers end-up writing and saving curl calls for testing these web-services as and when they develop or change them. This is really ugly and cumbersome (to keep modifying these 'saved' curl calls for repetitive testing) !! Plus such a mechanism disallows using these curl calls to be seamlessly integrated in a Test-Suite or a Nightly-Build Test System, etc.\r\n\r\n**json-ws-test** is simple framework for testing **JSON (response) Web-Services**. \r\n\r\nThe Test-Cases, i.e. the ugly curl calls you were having earlier, are written in a JSON file using a simple and flexible format defined by the json-ws-test framework. This test-cases JSON file is passed as an argument to the framework, which then executes these test-cases and generates a SUMMARY for them in a Tabular as well as JSON structure.\r\n\r\n\r\n### Sample\r\n\r\nFor the purpose of letting you have a flavor of what is in store for you in this framework we will use http://jsontest.com -- an online platform that exposes various web-services generating JSON responses.\r\n\r\nConsider the following sample test-case written in the JSON structure defined by json-ws-test framework:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Echo\",\r\n            \"host\" : \"http://echo.jsontest.com/key/value/one/two\",\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"key\",\r\n                        \"expected\" : \"value\"\r\n                    },\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"one\",\r\n                        \"expected\" : \"two\"\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n\r\nIt is using a RESTful web-service (refer 'host') that returns the following JSON response:\r\n\r\n```js\r\n{\r\n   \"one\": \"two\",\r\n   \"key\": \"value\"\r\n}\r\n```\r\n\r\nYou can write the sample test-case in some file (you can find it in *sample/single.test.json*. You can then run the test-case from the base directory of the project as follows:\r\n\r\n```bash\r\npython src/Tester.py sample/single.test.json\r\n```\r\n\r\nTry it now!\r\n\r\nYou will see a JSON version of this Summary of the test-case execution in the logs generated on your terminal:\r\n\r\n```\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - ================================\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - [SUMMARY JSON]\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - {'failed': {'count': 0, 'time': 0}, 'total': {'count': 1, 'time': 0.565485954284668}, 'steps': {'Echo': {'failed': {'count': 0, 'time': 0}, 'total': {'count': 1, 'time': 0.565485954284668}, 'passed': {'count': 1, 'time': 0.565485954284668}}}, 'passed': {'count': 1, 'time': 0.565485954284668}}\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - ================================\r\n```\r\n\r\nYou will also see a beautiful Summary in a tabular form for immediate use:\r\n\r\n```\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - ================================\r\n2013-10-30 18:19:47,781 - INFO     - Tester     - [SUMMARY]\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |------------------------------|--------------|--------------|--------------|\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |            [sid]             |   [total]    |   [passed]   |   [failed]   |\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |------------------------------|--------------|--------------|--------------|\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |                              | count avg(ms)| count avg(ms)| count avg(ms)|\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |------------------------------|--------------|--------------|--------------|\r\n2013-10-30 18:19:47,782 - INFO     - Tester     - |Echo                          |     1     565|     1     565|     0       0|\r\n2013-10-30 18:19:47,783 - INFO     - Tester     - |------------------------------|--------------|--------------|--------------|\r\n2013-10-30 18:19:47,783 - INFO     - Tester     - |OVERALL                       |     1     565|     1     565|     0       0|\r\n2013-10-30 18:19:47,783 - INFO     - Tester     - |------------------------------|--------------|--------------|--------------|\r\n2013-10-30 18:19:47,783 - INFO     - Tester     - ================================\r\n```\r\n\r\n\r\n## The Language Elements\r\n\r\nLets know do a walkthrough of the elements of the test-case definition language of this framework. All the elements are defined in JSON format.\r\n\r\n### steps\r\n\r\nThe **steps** element is a JSON array that defines the order in which individual test-cases need to be executed. For example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-1\",\r\n            ...\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-2\",\r\n            ...\r\n        },\r\n        ...\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-k\",\r\n            ...\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nthe test-cases will be executed in the specified order - Test-Case-1 followed by Test-Case-2 and so on uptil Test-Case-k.\r\n\r\n### construct\r\n\r\nThe **construct** element is used to define a step in the execution of a flow to be tested.\r\n\r\n#### [construct] TEST\r\n\r\nThe **TEST construct** is the actual evaluation or processing step that leads to a web-service being called. For example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Echo\",\r\n            \"host\" : \"http://echo.jsontest.com\",\r\n            \"path\" : \"/key/value/one/two\",\r\n            \"method\" : \"GET\",\r\n            \"input\" : {\r\n                ...\r\n            }, \r\n            \"output\" : {\r\n                ...\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n* \"construct\" : \"TEST\" -- [required] -- specifies the construct type.\r\n* \"sid\" : \"Echo\" -- specifies the step-id. This is of particular importance as we will see in case of *construct START_SESSION and END_SESSION*.\r\n* \"host\" : \"http://echo.jsontest.com\" -- [required] -- specifies the web-service to be hit.\r\n* \"path\" : \"/key/value/one/two\" -- [optional, default is \"\"] -- specifies the path to be appended to the *host*. Alternatively, the *host* may be fully qualified with the path (eg. \"host\" : \"http://echo.jsontest.com/key/value/one/two\") in which case this attribute may be omitted.\r\n* \"method\" : \"GET\" -- [optional, default is \"GET\"] -- specifies the HTTP-method to be used for hitting the web-services.\r\n* \"input\" : { .. } -- [optional, default is {}] -- specifies the arguments to be passed to the web-service.\r\n* \"output\" : { .. } -- [optional, default is {}] -- specifies the criteria for validation of the output of the web-service. Refer **check** section for further details.\r\n\r\n#### [construct] START_LOOP\r\n\r\nThe **START_LOOP construct** is the starting point of a loop, such that you can define what all test-cases (*TEST construct*) to be repeated and how many times. For example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-1\",\r\n            ...\r\n        },\r\n        {\r\n            \"construct\" : \"START_LOOP\",\r\n            \"count\" : 5\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-2\",\r\n            ...\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-3\",\r\n            ...\r\n        },\r\n        {\r\n            \"construct\" : \"END_LOOP\"\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-4\",\r\n            ...\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n* \"count\" : 5 -- [optional, default is 1] -- specifies the number of times the loop should be repeated.\r\n\r\nTest-Case-2 and Test-Case-3 will be executed one after the other repeatedly for 5 times, i.e. as [Test-Case-2, Test-Case-3, Test-Case-2, Test-Case-3,... (5 times)]. Test-Case-1 and Test-Case-4 will be executed just once as they do not fall in the loop ended by *END_LOOP construct*.\r\n\r\n**NOTE:** Nesting of loops is not allowed.\r\n\r\n#### [construct] END_LOOP\r\n\r\nThe **END_LOOP construct** is the ending point of a loop. Refer example in the *START_LOOP construct* section.\r\n\r\n#### [construct] START_SESSION\r\n\r\nThe **START_SESSION construct** is the starting point for defining a list of test-cases such that they form a part of a session. \r\n\r\nLets first understand what is the meaning of a *session* here. When creating test-cases you may want to use the *input* or *output* attributes of one test-case for defining the *input* or *output* attributes of another test-case. In order to facilitate this there needs to be a block that defines a list of test-cases where *input* and *output* of any test-case can be referred in a subsequent test-case within the block.\r\n\r\nFor example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-1\",\r\n            ...\r\n        },\r\n        {\r\n            \"construct\" : \"START_SESSION\"\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-2\",\r\n            \"host\" : \"http://ip.jsontest.com\",\r\n            \"input\" : {\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"PRESENT\",\r\n                        \"name\" : \"ip\"\r\n                    }\r\n                ]\r\n            } \r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-3\",\r\n            \"host\" : \"http://echo.jsontest.com/ip/$OUT[Test-Case-2][ip]\",\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"ip\",\r\n                        \"expected\" : \"$OUT[Test-Case-2][ip]\"\r\n                    }\r\n                ]\r\n            } \r\n        },\r\n        {\r\n            \"construct\" : \"END_SESSION\"\r\n        },\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"Test-Case-4\",\r\n            ...\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nTest-Case-3 is refering to the output of Test-Case-2 for defining its web-service call (in the *host* attribute) as well as defining the expected output (*$OUT[Test-Case-2][ip]*). Test-Case-1 and Test-Case-4 cannot be referred in the session as they do not fall in the block ended by *END_SESSION construct*.\r\n\r\nFollowing attributes of a *TEST construct* can be templatized in such a way:\r\n* host\r\n* path\r\n* input (value part of the attributes in input)\r\n* output (value part of the attributes in output)\r\n\r\nRefer **Input/Output** section for further details.\r\n\r\n\r\n**NOTE:** Nesting of sessions is not allowed.\r\n\r\n#### [construct] END_SESSION\r\n\r\nThe **END_SESSION construct** is the ending point of the test-case list to be considered for being a part of the session. Refer example in the *START_SESSION construct* section.\r\n\r\n#### Input/Output\r\n\r\nFollowing keywords are supported for referring session (defined by *START_LOOP and END_LOOP constructs*) parameters:\r\n* IN : to refer to input attributes of a previous test-case in the session\r\n* OUT : to refer to output (response JSON generated by the web-service call) of a previous test-case in the session\r\n\r\nThe syntax for refering to a session parameter is:\r\n* $IN[sid][attribute]\r\n* $OUT[sid][attribute]\r\nwhere *sid* is step-id and attribute is a JSON attribute being referred.\r\n\r\nExamples,\r\n* $IN[RegisterUser][user.address.city]\r\n* $OUT[FindIP][ip]\r\n\r\n### Default\r\n\r\nIf you want to use some common attributes across your test-cases you can use the **default** element. Following are the supported attributes for default value definition in this element:\r\n* host\r\n* path\r\n* method\r\n* input - this will act as the base input for all the test-cases. In case a test-case also has its own input attribute, that input attribute will be merged over this default input to come up with a unified input to be used in the test-case. Thus, the input attribute of a test-case will, in a way, override any common properties between it and the default input.\r\n\r\n### check\r\n\r\nThe **check** element allows you to do validations on the JSON response of the web-service calls made by your test-cases.\r\n\r\n#### [check] PRESENT\r\n\r\nThe **PRESENT check** simply checks if the specified attribute is present in the output (JSON response) or not. For example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"FindIP\",\r\n            \"host\" : \"http://ip.jsontest.com\",\r\n            \"input\" : {\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"PRESENT\",\r\n                        \"name\" : \"ip\"\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nthe framework will check whether the output of the web-service call has an attribute *ip* or not. For the sake of clarity the output of the web-service call made in this test case is something like:\r\n\r\n```js\r\n{\"ip\": \"8.8.8.8\"}\r\n```\r\n\r\nwhere the ip will be the IP of your system.\r\n\r\n#### [check] EXACT\r\n\r\nThe **EXACT check** checks if the specified attribute present in the output (JSON response) has the exact value as specified in the *expected* parameter or not. For example, in the following test-case JSON:\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"FetchHeaders\",\r\n            \"host\" : \"http://ip.jsontest.com\",\r\n            \"input\" : {\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"Host\",\r\n                        \"expected\" : \"headers.jsontest.com\"\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nthe framework will check whether the output of the web-service call has an attribute *Host* and it has the exact value *headers.jsontest.com* or not. For the sake of clarity the output of the web-service call made in this test case is something like:\r\n\r\n```js\r\n{\r\n   \"Accept-Language\": \"en-US,en;q=0.8\",\r\n   \"Host\": \"headers.jsontest.com\",\r\n   \"Accept-Charset\": \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\",\r\n   \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\r\n}\r\n```\r\n\r\n#### Doing checks on nested (complex) response values\r\n\r\nSuppose you want to check whether the output (JSON response) of your test-case web-service call has an attribute *result* that contains an attribute *user* with *id* as *12345* and *address* with *city* as *Bangalore*, i.e. something like the following response:\r\n\r\n```js\r\n{\r\n    \"result\" : {\r\n        \"user\" : {\r\n            \"id\" : \"12345\",\r\n            \"email\" : \"user.email@somedomain.com\",\r\n            \"address\" : {\r\n                \"city\" : \"Bangalore\",\r\n                \"state\" : \"Karnataka\",\r\n                \"country\" : \"India\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nyou can write your checks in one of the following ways:\r\n\r\n* The nested way\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"FindUser\",\r\n            \"host\" : \"http://some.webservice\",\r\n            \"path\" : \"/user/get\"\r\n            \"input\" : {\r\n                \"email\" : \"user.email@somedomain.com\"\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"PRESENT\",\r\n                        \"name\" : \"result\",\r\n                        \"expected\" : [\r\n                            {\r\n                                \"check\" : \"PRESENT\",\r\n                                \"name\" : \"user\",\r\n                                \"expected\" : [\r\n                                    {\r\n                                        \"check\" : \"EXACT\",\r\n                                        \"name\" : \"id\",\r\n                                        \"expected\" : \"12345\"\r\n                                    },\r\n                                    {\r\n                                        \"check\" : \"PRESENT\",\r\n                                        \"name\" : \"address\",\r\n                                        \"expected\" : [\r\n                                            {\r\n                                                \"check\" : \"EXACT\",\r\n                                                \"name\" : \"city\",\r\n                                                \"expected\" : \"Bangalore\"\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n* The linear way\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"FindUser\",\r\n            \"host\" : \"http://some.webservice\",\r\n            \"path\" : \"/user/get\"\r\n            \"input\" : {\r\n                \"email\" : \"user.email@somedomain.com\"\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"result.user.id\",\r\n                        \"expected\" : \"12345\"\r\n                    },\r\n                    {\r\n                        \"check\" : \"EXACT\",\r\n                        \"name\" : \"result.user.address.city\",\r\n                        \"expected\" : \"Bangalore\"\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n* The mixed way\r\n\r\n```js\r\n{\r\n    \"steps\" : [\r\n        {\r\n            \"construct\" : \"TEST\",\r\n            \"sid\" : \"FindUser\",\r\n            \"host\" : \"http://some.webservice\",\r\n            \"path\" : \"/user/get\"\r\n            \"input\" : {\r\n                \"email\" : \"user.email@somedomain.com\"\r\n            },\r\n            \"output\" : {\r\n                \"params\" : [\r\n                    {\r\n                        \"check\" : \"PRESENT\",\r\n                        \"name\" : \"result.user\",\r\n                        \"expected\" : [\r\n                            {\r\n                                \"check\" : \"EXACT\",\r\n                                \"name\" : \"id\",\r\n                                \"expected\" : \"12345\"\r\n                            },\r\n                            {\r\n                                \"check\" : \"EXACT\",\r\n                                \"name\" : \"address.city\",\r\n                                \"expected\" : \"Bangalore\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            } \r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nSeems like the best of both world, doesn't it ?! Make your pick.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}